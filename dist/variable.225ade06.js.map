{"version":3,"sources":["variable.js"],"names":["globalName","name","console","log","age","dayInWeek","maxNumber","count","size","infinity","negativeInfinity","nAn","char","brendan","greeting","helloBob","nothing","x","symbol1","Symbol","symbol2","symbol3","for","symbol4","description"],"mappings":"AAAA;AACA;AACA;AACA,cAEA;AACA;;;;AAEI,IAAIA,UAAU,GAAG,aAAjB,EAAgC;;AAEhC;AACI;AACA,MAAIC,KAAI,GAAG,OAAX;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAA,EAAAA,KAAI,GAAG,OAAP;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACDC,OAAO,CAACC,GAAR,CAAY,YAAYF,IAAxB,GAEA;AACA;;AACAG,GAAG,GAAG,CAAN;AACA,IAAIA,GAAJ,EAEA;;AACA;AACIA,EAAAA,GAAG,GAAG,CAAN;AACA,MAAIA,GAAJ;AACH;AACDF,OAAO,CAACC,GAAR,CAAYC,GAAZ,GAAkB;AAGtB;AACI;AACA;AACA;AACA;;AAEA,IAAMC,SAAS,GAAG,CAAlB;AACA,IAAMC,SAAS,GAAG,CAAlB,EAEA;AAEJ;AAEI;AACA;AACA;;AAEA,IAAMC,KAAK,GAAG,EAAd,EAAkB;;AAClB,IAAMC,IAAI,GAAG,IAAb,EAAmB;;AACnBN,OAAO,CAACC,GAAR,mBAAuBI,KAAvB,6BAA8CA,KAA9C;AACAL,OAAO,CAACC,GAAR,mBAAuBK,IAAvB,6BAA6CA,IAA7C,KAEA;;AACA,IAAMC,QAAQ,GAAG,IAAI,CAArB;AACA,IAAMC,gBAAgB,GAAG,CAAC,CAAD,GAAK,CAA9B;AACA,IAAMC,GAAG,GAAG,kBAAkB,CAA9B;AAEAT,OAAO,CAACC,GAAR,CAAYM,QAAZ;AACAP,OAAO,CAACC,GAAR,CAAYO,gBAAZ;AACAR,OAAO,CAACC,GAAR,CAAYQ,GAAZ,GAGA;;AACA,IAAMC,IAAI,GAAG,GAAb;AACA,IAAMC,OAAO,GAAG,SAAhB;AACA,IAAMC,QAAQ,GAAG,WAAWD,OAA5B;AAEA,IAAME,QAAQ,gBAASF,OAAT,MAAd,EAAmC;AAGnC;AACA;AACA;AAGA;;AACA,IAAIG,OAAO,GAAG,IAAd;AACAd,OAAO,CAACC,GAAR,kBAAsBa,OAAtB,6BAA+CA,OAA/C,KAEA;;AACA,IAAIC,CAAJ,EAAO;;AACPf,OAAO,CAACC,GAAR,kBAAsBc,CAAtB,6BAAyCA,CAAzC,KAEA;;AACA,IAAMC,OAAO,GAAGC,MAAM,CAAC,IAAD,CAAtB;AACA,IAAMC,OAAO,GAAGD,MAAM,CAAC,IAAD,CAAtB;AACAjB,OAAO,CAACC,GAAR,CAAYe,OAAO,KAAKE,OAAxB,GAAkC;AAClC;;AAEA,IAAMC,OAAO,GAAGF,MAAM,CAACG,GAAP,CAAW,IAAX,CAAhB;AACA,IAAMC,OAAO,GAAGJ,MAAM,CAACG,GAAP,CAAW,IAAX,CAAhB;AACApB,OAAO,CAACC,GAAR,CAAYkB,OAAO,KAAKE,OAAxB,GAAkC;;AAClCrB,OAAO,CAACC,GAAR,CAAYkB,OAAO,CAACG,WAApB,GAAkC;AAIlC;AACA","file":"variable.225ade06.js","sourceRoot":"..","sourcesContent":["// 1. Use strict\n// added in ES 5\n// use this for Valina Javascript.\n'use strict';\n\n// 2. Variable\n// let (added in ES6)\n\n    let globalName = 'global name'; //글로벌 스콥 -> 메모리에 할당 되어 있어서 최소한\n\n    {\n        //블럭 안에서만 사용 가능\n        let name = 'ellie';\n        console.log(name);\n        name = 'hello';\n        console.log(name);\n    }\n    console.log(\"name : \" + name);\n\n    // var (don't ever use this!)\n    // var hoisting -> 어디에서 선언했는지 상관 없이 제일 위로 선언을 놓는 것. 선언이 올라가는 것.\n    age = 4;\n    var age;\n\n    //블록 안에서 사용해도 밖에서 사용 됨.\n    {\n        age = 4;\n        var age;\n    }\n    console.log(age); // -> 블록 밖에서 사용 됨... ㅠㅠ\n\n\n// 3. contants - 상수\n    // favor immutable data type always for a few reason:\n    // - security\n    // - thread safety\n    // - reduce human mistakes\n\n    const dayInWeek = 7;\n    const maxNumber = 5;\n\n    // 변경 될 수 있는 것을 Mutable 이라고 한다.\n\n// 4. Variable types\n\n    // primitive, single item: number, string, boolean, null, undefiedn, symbol\n    // object, box container\n    // function, first-class functoion -> 함수도 변수에 할당 될 수 있다.\n\n    const count = 17; // integer\n    const size = 17.1; // decimal number\n    console.log(`value : ${count}, type: ${typeof count}`);\n    console.log(`value : ${size}, type: ${typeof size}`);\n\n    // number - speicla numeric values:\n    const infinity = 1 / 0;\n    const negativeInfinity = -1 / 0;\n    const nAn = 'not a number ' / 2;\n\n    console.log(infinity);\n    console.log(negativeInfinity);\n    console.log(nAn);\n\n\n    // string\n    const char = 'c';\n    const brendan = 'brendan';\n    const greeting = 'hello ' + brendan;\n\n    const helloBob = `hi ${brendan}!`; //template literals (string) 백틱으로 감싼 문자열 ${} 로 변수를 넣을 수 있다.\n\n\n    // boolean\n    // false : 0, null, undefined, NaN, ''\n    // true : any other value\n\n\n    // null -> null로 정의한 경우\n    let nothing = null;\n    console.log(`value: ${nothing}, type: ${typeof nothing}`);\n\n    // undefined 값을 할당하지 않은 것\n    let x; // 혹은 let x = undefined;\n    console.log(`value: ${x}, type: ${typeof x}`);\n\n    // symbol, create unique identifiers for objects -> 고유한 식별자\n    const symbol1 = Symbol('id');\n    const symbol2 = Symbol('id');\n    console.log(symbol1 === symbol2); // -> false\n    // 같은 값을 넣어도 다른 심볼로 만들어짐. 같은 스트링 이라도...\n\n    const symbol3 = Symbol.for('id');\n    const symbol4 = Symbol.for('id');\n    console.log(symbol3 === symbol4); // -> true 주어진 스트링에 맞는 심볼을 만들어줘 -> 같다고 나옴.\n    console.log(symbol3.description); // -> symbol을 출력하면 에러...   .description 을 붙여줘야함.\n\n\n\n    // 5. Dynamic typing: dynamically typed language\n    // 런 타임(프로그램이 동작할 때) 할당된 값에 따라 바뀔 수 있다."]}